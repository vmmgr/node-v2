// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: grpc.proto

package grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

type VMData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string         `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GroupID   int64          `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	CPU       int32          `protobuf:"varint,4,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Mem       int32          `protobuf:"varint,5,opt,name=Mem,proto3" json:"Mem,omitempty"`
	ISO       string         `protobuf:"bytes,6,opt,name=ISO,proto3" json:"ISO,omitempty"`
	Storage   []*StorageData `protobuf:"bytes,7,rep,name=Storage,proto3" json:"Storage,omitempty"`
	Net       []*NetData     `protobuf:"bytes,8,rep,name=Net,proto3" json:"Net,omitempty"`
	AutoStart bool           `protobuf:"varint,9,opt,name=AutoStart,proto3" json:"AutoStart,omitempty"`
}

func (x *VMData) Reset() {
	*x = VMData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMData) ProtoMessage() {}

func (x *VMData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMData.ProtoReflect.Descriptor instead.
func (*VMData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *VMData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *VMData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VMData) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *VMData) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *VMData) GetMem() int32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *VMData) GetISO() string {
	if x != nil {
		return x.ISO
	}
	return ""
}

func (x *VMData) GetStorage() []*StorageData {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *VMData) GetNet() []*NetData {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *VMData) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

type StorageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GroupID  int64       `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Driver   int32       `protobuf:"varint,4,opt,name=Driver,proto3" json:"Driver,omitempty"` //1:virtio
	Mode     int32       `protobuf:"varint,5,opt,name=Mode,proto3" json:"Mode,omitempty"`     //1~9:AutoMode 10:ManualMode
	Path     string      `protobuf:"bytes,6,opt,name=Path,proto3" json:"Path,omitempty"`      //Only Manual Mode
	MaxSize  int64       `protobuf:"varint,7,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	SnapShot []*SnapShot `protobuf:"bytes,8,rep,name=SnapShot,proto3" json:"SnapShot,omitempty"`
	Image    string      `protobuf:"bytes,9,opt,name=Image,proto3" json:"Image,omitempty"` //image path
	Lock     bool        `protobuf:"varint,10,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (x *StorageData) Reset() {
	*x = StorageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageData) ProtoMessage() {}

func (x *StorageData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageData.ProtoReflect.Descriptor instead.
func (*StorageData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *StorageData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StorageData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageData) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *StorageData) GetDriver() int32 {
	if x != nil {
		return x.Driver
	}
	return 0
}

func (x *StorageData) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *StorageData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StorageData) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *StorageData) GetSnapShot() []*SnapShot {
	if x != nil {
		return x.SnapShot
	}
	return nil
}

func (x *StorageData) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *StorageData) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

type NetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GroupID []int64 `protobuf:"varint,3,rep,packed,name=GroupID,proto3" json:"GroupID,omitempty"`
	VLAN    int32   `protobuf:"varint,4,opt,name=VLAN,proto3" json:"VLAN,omitempty"`
	Lock    bool    `protobuf:"varint,5,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (x *NetData) Reset() {
	*x = NetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetData) ProtoMessage() {}

func (x *NetData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetData.ProtoReflect.Descriptor instead.
func (*NetData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *NetData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NetData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetData) GetGroupID() []int64 {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *NetData) GetVLAN() int32 {
	if x != nil {
		return x.VLAN
	}
	return 0
}

func (x *NetData) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

type NICData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GroupID    int64  `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	NetID      int64  `protobuf:"varint,4,opt,name=NetID,proto3" json:"NetID,omitempty"`
	MacAddress string `protobuf:"bytes,5,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	Driver     int32  `protobuf:"varint,6,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Lock       bool   `protobuf:"varint,7,opt,name=Lock,proto3" json:"Lock,omitempty"`
}

func (x *NICData) Reset() {
	*x = NICData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICData) ProtoMessage() {}

func (x *NICData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICData.ProtoReflect.Descriptor instead.
func (*NICData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *NICData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NICData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NICData) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *NICData) GetNetID() int64 {
	if x != nil {
		return x.NetID
	}
	return 0
}

func (x *NICData) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NICData) GetDriver() int32 {
	if x != nil {
		return x.Driver
	}
	return 0
}

func (x *NICData) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

type SnapShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Tag  string `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Size int64  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Date string `protobuf:"bytes,4,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *SnapShot) Reset() {
	*x = SnapShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapShot) ProtoMessage() {}

func (x *SnapShot) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapShot.ProtoReflect.Descriptor instead.
func (*SnapShot) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *SnapShot) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SnapShot) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SnapShot) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SnapShot) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type VMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Mode    int32  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`       //0:Start 1:Stop 2:Shutdown 3:Restart 4:HardReset 5:Pause 6:Resume 10:SnapShot
	Boot    int32  `protobuf:"varint,3,opt,name=boot,proto3" json:"boot,omitempty"`       //0:DiskBoot 1:ISOBoot
	Option1 string `protobuf:"bytes,4,opt,name=option1,proto3" json:"option1,omitempty"`  //not used...
	Option2 int64  `protobuf:"varint,5,opt,name=option2,proto3" json:"option2,omitempty"` //snapshot ID
}

func (x *VMStatus) Reset() {
	*x = VMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMStatus) ProtoMessage() {}

func (x *VMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMStatus.ProtoReflect.Descriptor instead.
func (*VMStatus) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *VMStatus) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *VMStatus) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *VMStatus) GetBoot() int32 {
	if x != nil {
		return x.Boot
	}
	return 0
}

func (x *VMStatus) GetOption1() string {
	if x != nil {
		return x.Option1
	}
	return ""
}

func (x *VMStatus) GetOption2() int64 {
	if x != nil {
		return x.Option2
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *Result) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Result) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x65,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x53, 0x4f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x49, 0x53, 0x4f, 0x12, 0x26, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x4e,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x03, 0x4e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a,
	0x08, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x53, 0x6e, 0x61, 0x70,
	0x53, 0x68, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x6f,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4c, 0x41, 0x4e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x56, 0x4c, 0x41, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x22,
	0xa9, 0x01, 0x0a, 0x07, 0x4e, 0x49, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4e, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x54, 0x0a, 0x08, 0x53,
	0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x76, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x22, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32,
	0xfd, 0x05, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x56,
	0x4d, 0x12, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x4d, 0x12, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x12, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56,
	0x4d, 0x12, 0x09, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1b, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x56, 0x4d,
	0x12, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x4d,
	0x12, 0x05, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x07, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0c,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x28, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x05,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x1d, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x74, 0x12, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x12, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x12, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x12, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x08,
	0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x74, 0x12, 0x05, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x08,
	0x2e, 0x4e, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x1d, 0x0a, 0x06,
	0x41, 0x64, 0x64, 0x4e, 0x49, 0x43, 0x12, 0x08, 0x2e, 0x4e, 0x49, 0x43, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x12, 0x08, 0x2e, 0x4e, 0x49, 0x43, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x20, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x49, 0x43, 0x12, 0x08, 0x2e, 0x4e, 0x49, 0x43,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x1e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x49, 0x43, 0x12, 0x08, 0x2e, 0x4e, 0x49, 0x43, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x08, 0x2e, 0x4e, 0x49, 0x43, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x20, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x49, 0x43, 0x12, 0x05, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x1a, 0x08, 0x2e, 0x4e, 0x49, 0x43, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x05, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_grpc_proto_goTypes = []interface{}{
	(*Null)(nil),        // 0: Null
	(*VMData)(nil),      // 1: VMData
	(*StorageData)(nil), // 2: StorageData
	(*NetData)(nil),     // 3: NetData
	(*NICData)(nil),     // 4: NICData
	(*SnapShot)(nil),    // 5: SnapShot
	(*VMStatus)(nil),    // 6: VMStatus
	(*Result)(nil),      // 7: Result
}
var file_grpc_proto_depIdxs = []int32{
	2,  // 0: VMData.Storage:type_name -> StorageData
	3,  // 1: VMData.Net:type_name -> NetData
	5,  // 2: StorageData.SnapShot:type_name -> SnapShot
	1,  // 3: Node.AddVM:input_type -> VMData
	1,  // 4: Node.DeleteVM:input_type -> VMData
	1,  // 5: Node.UpdateVM:input_type -> VMData
	6,  // 6: Node.StatusVM:input_type -> VMStatus
	1,  // 7: Node.GetVM:input_type -> VMData
	0,  // 8: Node.GetAllVM:input_type -> Null
	2,  // 9: Node.AddStorage:input_type -> StorageData
	2,  // 10: Node.DeleteStorage:input_type -> StorageData
	2,  // 11: Node.UpdateStorage:input_type -> StorageData
	2,  // 12: Node.GetStorage:input_type -> StorageData
	0,  // 13: Node.GetAllStorage:input_type -> Null
	3,  // 14: Node.AddNet:input_type -> NetData
	3,  // 15: Node.DeleteNet:input_type -> NetData
	3,  // 16: Node.UpdateNet:input_type -> NetData
	3,  // 17: Node.GetNet:input_type -> NetData
	0,  // 18: Node.GetAllNet:input_type -> Null
	4,  // 19: Node.AddNIC:input_type -> NICData
	4,  // 20: Node.DeleteNIC:input_type -> NICData
	4,  // 21: Node.UpdateNIC:input_type -> NICData
	4,  // 22: Node.GetNIC:input_type -> NICData
	0,  // 23: Node.GetAllNIC:input_type -> Null
	0,  // 24: Node.StopNode:input_type -> Null
	7,  // 25: Node.AddVM:output_type -> Result
	7,  // 26: Node.DeleteVM:output_type -> Result
	7,  // 27: Node.UpdateVM:output_type -> Result
	7,  // 28: Node.StatusVM:output_type -> Result
	1,  // 29: Node.GetVM:output_type -> VMData
	1,  // 30: Node.GetAllVM:output_type -> VMData
	7,  // 31: Node.AddStorage:output_type -> Result
	7,  // 32: Node.DeleteStorage:output_type -> Result
	7,  // 33: Node.UpdateStorage:output_type -> Result
	2,  // 34: Node.GetStorage:output_type -> StorageData
	2,  // 35: Node.GetAllStorage:output_type -> StorageData
	7,  // 36: Node.AddNet:output_type -> Result
	7,  // 37: Node.DeleteNet:output_type -> Result
	7,  // 38: Node.UpdateNet:output_type -> Result
	3,  // 39: Node.GetNet:output_type -> NetData
	3,  // 40: Node.GetAllNet:output_type -> NetData
	7,  // 41: Node.AddNIC:output_type -> Result
	7,  // 42: Node.DeleteNIC:output_type -> Result
	7,  // 43: Node.UpdateNIC:output_type -> Result
	4,  // 44: Node.GetNIC:output_type -> NICData
	4,  // 45: Node.GetAllNIC:output_type -> NICData
	7,  // 46: Node.StopNode:output_type -> Result
	25, // [25:47] is the sub-list for method output_type
	3,  // [3:25] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NICData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	AddVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	DeleteVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	UpdateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error)
	StatusVM(ctx context.Context, in *VMStatus, opts ...grpc.CallOption) (*Result, error)
	GetVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*VMData, error)
	GetAllVM(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllVMClient, error)
	AddStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (Node_AddStorageClient, error)
	DeleteStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*Result, error)
	UpdateStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*Result, error)
	GetStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*StorageData, error)
	GetAllStorage(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllStorageClient, error)
	AddNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error)
	DeleteNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error)
	UpdateNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error)
	GetNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*NetData, error)
	GetAllNet(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllNetClient, error)
	AddNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error)
	DeleteNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error)
	UpdateNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error)
	GetNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*NICData, error)
	GetAllNIC(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllNICClient, error)
	StopNode(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AddVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/AddVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DeleteVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StatusVM(ctx context.Context, in *VMStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/StatusVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetVM(ctx context.Context, in *VMData, opts ...grpc.CallOption) (*VMData, error) {
	out := new(VMData)
	err := c.cc.Invoke(ctx, "/Node/GetVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllVM(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/Node/GetAllVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetAllVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_GetAllVMClient interface {
	Recv() (*VMData, error)
	grpc.ClientStream
}

type nodeGetAllVMClient struct {
	grpc.ClientStream
}

func (x *nodeGetAllVMClient) Recv() (*VMData, error) {
	m := new(VMData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) AddStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (Node_AddStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/Node/AddStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAddStorageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_AddStorageClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type nodeAddStorageClient struct {
	grpc.ClientStream
}

func (x *nodeAddStorageClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) DeleteStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/DeleteStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/UpdateStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetStorage(ctx context.Context, in *StorageData, opts ...grpc.CallOption) (*StorageData, error) {
	out := new(StorageData)
	err := c.cc.Invoke(ctx, "/Node/GetStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllStorage(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllStorageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[2], "/Node/GetAllStorage", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetAllStorageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_GetAllStorageClient interface {
	Recv() (*StorageData, error)
	grpc.ClientStream
}

type nodeGetAllStorageClient struct {
	grpc.ClientStream
}

func (x *nodeGetAllStorageClient) Recv() (*StorageData, error) {
	m := new(StorageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) AddNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/AddNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DeleteNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/DeleteNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/UpdateNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNet(ctx context.Context, in *NetData, opts ...grpc.CallOption) (*NetData, error) {
	out := new(NetData)
	err := c.cc.Invoke(ctx, "/Node/GetNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllNet(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllNetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[3], "/Node/GetAllNet", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetAllNetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_GetAllNetClient interface {
	Recv() (*NetData, error)
	grpc.ClientStream
}

type nodeGetAllNetClient struct {
	grpc.ClientStream
}

func (x *nodeGetAllNetClient) Recv() (*NetData, error) {
	m := new(NetData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) AddNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/AddNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) DeleteNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/DeleteNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/UpdateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNIC(ctx context.Context, in *NICData, opts ...grpc.CallOption) (*NICData, error) {
	out := new(NICData)
	err := c.cc.Invoke(ctx, "/Node/GetNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAllNIC(ctx context.Context, in *Null, opts ...grpc.CallOption) (Node_GetAllNICClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[4], "/Node/GetAllNIC", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeGetAllNICClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_GetAllNICClient interface {
	Recv() (*NICData, error)
	grpc.ClientStream
}

type nodeGetAllNICClient struct {
	grpc.ClientStream
}

func (x *nodeGetAllNICClient) Recv() (*NICData, error) {
	m := new(NICData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) StopNode(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Node/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	AddVM(context.Context, *VMData) (*Result, error)
	DeleteVM(context.Context, *VMData) (*Result, error)
	UpdateVM(context.Context, *VMData) (*Result, error)
	StatusVM(context.Context, *VMStatus) (*Result, error)
	GetVM(context.Context, *VMData) (*VMData, error)
	GetAllVM(*Null, Node_GetAllVMServer) error
	AddStorage(*StorageData, Node_AddStorageServer) error
	DeleteStorage(context.Context, *StorageData) (*Result, error)
	UpdateStorage(context.Context, *StorageData) (*Result, error)
	GetStorage(context.Context, *StorageData) (*StorageData, error)
	GetAllStorage(*Null, Node_GetAllStorageServer) error
	AddNet(context.Context, *NetData) (*Result, error)
	DeleteNet(context.Context, *NetData) (*Result, error)
	UpdateNet(context.Context, *NetData) (*Result, error)
	GetNet(context.Context, *NetData) (*NetData, error)
	GetAllNet(*Null, Node_GetAllNetServer) error
	AddNIC(context.Context, *NICData) (*Result, error)
	DeleteNIC(context.Context, *NICData) (*Result, error)
	UpdateNIC(context.Context, *NICData) (*Result, error)
	GetNIC(context.Context, *NICData) (*NICData, error)
	GetAllNIC(*Null, Node_GetAllNICServer) error
	StopNode(context.Context, *Null) (*Result, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) AddVM(context.Context, *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVM not implemented")
}
func (*UnimplementedNodeServer) DeleteVM(context.Context, *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (*UnimplementedNodeServer) UpdateVM(context.Context, *VMData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (*UnimplementedNodeServer) StatusVM(context.Context, *VMStatus) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusVM not implemented")
}
func (*UnimplementedNodeServer) GetVM(context.Context, *VMData) (*VMData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (*UnimplementedNodeServer) GetAllVM(*Null, Node_GetAllVMServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllVM not implemented")
}
func (*UnimplementedNodeServer) AddStorage(*StorageData, Node_AddStorageServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStorage not implemented")
}
func (*UnimplementedNodeServer) DeleteStorage(context.Context, *StorageData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorage not implemented")
}
func (*UnimplementedNodeServer) UpdateStorage(context.Context, *StorageData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorage not implemented")
}
func (*UnimplementedNodeServer) GetStorage(context.Context, *StorageData) (*StorageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorage not implemented")
}
func (*UnimplementedNodeServer) GetAllStorage(*Null, Node_GetAllStorageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStorage not implemented")
}
func (*UnimplementedNodeServer) AddNet(context.Context, *NetData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNet not implemented")
}
func (*UnimplementedNodeServer) DeleteNet(context.Context, *NetData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNet not implemented")
}
func (*UnimplementedNodeServer) UpdateNet(context.Context, *NetData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNet not implemented")
}
func (*UnimplementedNodeServer) GetNet(context.Context, *NetData) (*NetData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNet not implemented")
}
func (*UnimplementedNodeServer) GetAllNet(*Null, Node_GetAllNetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllNet not implemented")
}
func (*UnimplementedNodeServer) AddNIC(context.Context, *NICData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNIC not implemented")
}
func (*UnimplementedNodeServer) DeleteNIC(context.Context, *NICData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNIC not implemented")
}
func (*UnimplementedNodeServer) UpdateNIC(context.Context, *NICData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNIC not implemented")
}
func (*UnimplementedNodeServer) GetNIC(context.Context, *NICData) (*NICData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNIC not implemented")
}
func (*UnimplementedNodeServer) GetAllNIC(*Null, Node_GetAllNICServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllNIC not implemented")
}
func (*UnimplementedNodeServer) StopNode(context.Context, *Null) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AddVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/AddVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/UpdateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StatusVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StatusVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/StatusVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StatusVM(ctx, req.(*VMStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/GetVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetVM(ctx, req.(*VMData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetAllVM(m, &nodeGetAllVMServer{stream})
}

type Node_GetAllVMServer interface {
	Send(*VMData) error
	grpc.ServerStream
}

type nodeGetAllVMServer struct {
	grpc.ServerStream
}

func (x *nodeGetAllVMServer) Send(m *VMData) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_AddStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).AddStorage(m, &nodeAddStorageServer{stream})
}

type Node_AddStorageServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type nodeAddStorageServer struct {
	grpc.ServerStream
}

func (x *nodeAddStorageServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/DeleteStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteStorage(ctx, req.(*StorageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/UpdateStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateStorage(ctx, req.(*StorageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/GetStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetStorage(ctx, req.(*StorageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetAllStorage(m, &nodeGetAllStorageServer{stream})
}

type Node_GetAllStorageServer interface {
	Send(*StorageData) error
	grpc.ServerStream
}

type nodeGetAllStorageServer struct {
	grpc.ServerStream
}

func (x *nodeGetAllStorageServer) Send(m *StorageData) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_AddNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/AddNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddNet(ctx, req.(*NetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DeleteNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/DeleteNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteNet(ctx, req.(*NetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/UpdateNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateNet(ctx, req.(*NetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/GetNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNet(ctx, req.(*NetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllNet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetAllNet(m, &nodeGetAllNetServer{stream})
}

type Node_GetAllNetServer interface {
	Send(*NetData) error
	grpc.ServerStream
}

type nodeGetAllNetServer struct {
	grpc.ServerStream
}

func (x *nodeGetAllNetServer) Send(m *NetData) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_AddNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NICData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/AddNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddNIC(ctx, req.(*NICData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_DeleteNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NICData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).DeleteNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/DeleteNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).DeleteNIC(ctx, req.(*NICData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NICData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/UpdateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateNIC(ctx, req.(*NICData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NICData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/GetNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNIC(ctx, req.(*NICData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAllNIC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetAllNIC(m, &nodeGetAllNICServer{stream})
}

type Node_GetAllNICServer interface {
	Send(*NICData) error
	grpc.ServerStream
}

type nodeGetAllNICServer struct {
	grpc.ServerStream
}

func (x *nodeGetAllNICServer) Send(m *NICData) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StopNode(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVM",
			Handler:    _Node_AddVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _Node_DeleteVM_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _Node_UpdateVM_Handler,
		},
		{
			MethodName: "StatusVM",
			Handler:    _Node_StatusVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _Node_GetVM_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _Node_DeleteStorage_Handler,
		},
		{
			MethodName: "UpdateStorage",
			Handler:    _Node_UpdateStorage_Handler,
		},
		{
			MethodName: "GetStorage",
			Handler:    _Node_GetStorage_Handler,
		},
		{
			MethodName: "AddNet",
			Handler:    _Node_AddNet_Handler,
		},
		{
			MethodName: "DeleteNet",
			Handler:    _Node_DeleteNet_Handler,
		},
		{
			MethodName: "UpdateNet",
			Handler:    _Node_UpdateNet_Handler,
		},
		{
			MethodName: "GetNet",
			Handler:    _Node_GetNet_Handler,
		},
		{
			MethodName: "AddNIC",
			Handler:    _Node_AddNIC_Handler,
		},
		{
			MethodName: "DeleteNIC",
			Handler:    _Node_DeleteNIC_Handler,
		},
		{
			MethodName: "UpdateNIC",
			Handler:    _Node_UpdateNIC_Handler,
		},
		{
			MethodName: "GetNIC",
			Handler:    _Node_GetNIC_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _Node_StopNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllVM",
			Handler:       _Node_GetAllVM_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddStorage",
			Handler:       _Node_AddStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllStorage",
			Handler:       _Node_GetAllStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllNet",
			Handler:       _Node_GetAllNet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllNIC",
			Handler:       _Node_GetAllNIC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
